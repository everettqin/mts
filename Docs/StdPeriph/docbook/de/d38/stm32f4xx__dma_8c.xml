<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="de/d38/stm32f4xx__dma_8c">
    <title>stm32f4xx_dma.c File Reference</title>
    <programlisting>#include stm32f4xx_dma.h</programlisting>
    <programlisting>#include stm32f4xx_rcc.h</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga65f8cdee3cc2302bafb0a32a15692a81">TRANSFER_IT_ENABLE_MASK</link> (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
                                           DMA_SxCR_TEIE | DMA_SxCR_DMEIE)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga0a11ce367da8e19eb27cf7f129da4b3d">DMA_Stream0_IT_MASK</link> (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
                                           DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
                                           DMA_LISR_TCIF0)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga145798f7c0cffc0effe3b6588f7a5812">DMA_Stream1_IT_MASK</link> (uint32_t)(DMA_Stream0_IT_MASK &lt;&lt; 6)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1gab7e71eaed70613ad592acfb37eb37777">DMA_Stream2_IT_MASK</link> (uint32_t)(DMA_Stream0_IT_MASK &lt;&lt; 16)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga83a5c838038ce61242f8beaf8d9fff43">DMA_Stream3_IT_MASK</link> (uint32_t)(DMA_Stream0_IT_MASK &lt;&lt; 22)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga55d28ead27e0af7d17db2b749695abe2">DMA_Stream4_IT_MASK</link> (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1gaceb30b7dcde1275d843ea932a00f44d7">DMA_Stream5_IT_MASK</link> (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga085aa754247e62f4b95111ea4ebf4f6f">DMA_Stream6_IT_MASK</link> (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga1fe8cb133c442e62bd082adee93a890e">DMA_Stream7_IT_MASK</link> (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga802b72c1de784e703af80a6910592a5e">TRANSFER_IT_MASK</link> (uint32_t)0x0F3C0F3C</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga375c64407de662589e2b12ac4e5e0489">HIGH_ISR_MASK</link> (uint32_t)0x20000000</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="df/df8/group___d_m_a_1ga1092a089e682f72660b95df5ee92a167">RESERVED_MASK</link> (uint32_t)0x0F7D0F7D</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1ga38d4a4ab8990299f8a6cf064e1e811d0">DMA_DeInit</link> (
DMA_Stream_TypeDef * DMAy_Streamx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1gaced8a4149acfb0a50b50e63273a87148">DMA_Init</link> (
DMA_Stream_TypeDef * DMAy_Streamx, <link linkend="d4/d43/struct_d_m_a___init_type_def">DMA_InitTypeDef</link> * DMA_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1ga0f7f95f750a90a6824f4e9b6f58adc7e">DMA_StructInit</link> (
<link linkend="d4/d43/struct_d_m_a___init_type_def">DMA_InitTypeDef</link> * DMA_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1gab2bea22f9f6dc62fdd7afb385a0c1f73">DMA_Cmd</link> (
DMA_Stream_TypeDef * DMAy_Streamx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1ga210a9861460b3c9b3fa14fdc1a949744">DMA_PeriphIncOffsetSizeConfig</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_Pincos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d7/d4e/group___d_m_a___group1_1ga77f7628f6be9d6d088127eceb090b8b2">DMA_FlowControllerConfig</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_FlowCtrl)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/da4/group___d_m_a___group2_1ga6a11a2c951cff59b125ba8857d44e3f3">DMA_SetCurrDataCounter</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint16_t Counter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="de/da4/group___d_m_a___group2_1ga4a76444a92423f5f15a4328738d6dc46">DMA_GetCurrDataCounter</link> (
DMA_Stream_TypeDef * DMAy_Streamx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/d7c/group___d_m_a___group3_1ga8d0957e50302efaf48a16c62d14c9ca8">DMA_DoubleBufferModeConfig</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t Memory1BaseAddr, uint32_t DMA_CurrentMemory)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/d7c/group___d_m_a___group3_1ga7fe09e62ea3125db384829dab59ebe3e">DMA_DoubleBufferModeCmd</link> (
DMA_Stream_TypeDef * DMAy_Streamx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/d7c/group___d_m_a___group3_1ga4ebcffd32eb6968ac61cfb64a6bae258">DMA_MemoryTargetConfig</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t MemoryBaseAddr, uint32_t DMA_MemoryTarget)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="de/d7c/group___d_m_a___group3_1ga74b6624f9faa2f43c9369ddbdeab241c">DMA_GetCurrentMemoryTarget</link> (
DMA_Stream_TypeDef * DMAy_Streamx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FunctionalState <link linkend="db/d44/group___d_m_a___group4_1gaa4d631cdd6cd020106435f30c0c6fb15">DMA_GetCmdStatus</link> (
DMA_Stream_TypeDef * DMAy_Streamx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="db/d44/group___d_m_a___group4_1ga9893809a7067861ec111f7d712ebf28d">DMA_GetFIFOStatus</link> (
DMA_Stream_TypeDef * DMAy_Streamx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="db/d44/group___d_m_a___group4_1ga10cfc0fe31d64a1fd8fb3efb4ae2a411">DMA_GetFlagStatus</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d44/group___d_m_a___group4_1ga510d62b4051f5a5de164e84b266b851d">DMA_ClearFlag</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d44/group___d_m_a___group4_1gab9c469a3f5d4aca5c97dee798ffc2f05">DMA_ITConfig</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ITStatus <link linkend="db/d44/group___d_m_a___group4_1gad0ccf5f6548bd7cf8f2cae30393bb716">DMA_GetITStatus</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d44/group___d_m_a___group4_1gad5433018889cd36140d98bb380c4e76e">DMA_ClearITPendingBit</link> (
DMA_Stream_TypeDef * DMAy_Streamx, uint32_t DMA_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Direct Memory Access controller (DMA): </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Initialization and Configuration</para>
</listitem><listitem>
<para>Data Counter</para>
</listitem><listitem>
<para>Double Buffer mode configuration and command</para>
</listitem><listitem>
<para>Interrupts and flags management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*      
*          ===================================================================      
*                                 How to use this driver
*          =================================================================== 
*          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, ENABLE)
*             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
*             function for DMA2.
*
*          2. Enable and configure the peripheral to be connected to the DMA Stream
*             (except for internal SRAM / FLASH memories: no initialization is 
*             necessary). 
*        
*          3. For a given Stream, program the required configuration through following parameters:   
*             Source and Destination addresses, Transfer Direction, Transfer size, Source and Destination 
*             data formats, Circular or Normal mode, Stream Priority level, Source and Destination 
*             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source and/or 
*             Destination (if needed) using the DMA_Init() function.
*             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
*             to initialize a given structure with default values (reset values), the modify
*             only necessary fields (ie. Source and Destination addresses, Transfer size and Data Formats).
*
*          4. Enable the NVIC and the corresponding interrupt(s) using the function 
*             DMA_ITConfig() if you need to use DMA interrupts. 
*
*          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by configuring 
*             the second Memory address and the first Memory to be used through the function 
*             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the function
*             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
*    
*          6. Enable the DMA stream using the DMA_Cmd() function. 
*                
*          7. Activate the needed Stream Request using PPP_DMACmd() function for
*             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
*             The function allowing this operation is provided in each PPP peripheral
*             driver (ie. SPI_DMACmd for SPI peripheral).
*             Once the Stream is enabled, it is not possible to modify its configuration
*             unless the stream is stopped and disabled.
*             After enabling the Stream, it is advised to monitor the EN bit status using
*             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
*             this bit will remain reset and all transfers on this Stream will remain on hold.      
*
*          8. Optionally, you can configure the number of data to be transferred
*             when the Stream is disabled (ie. after each Transfer Complete event
*             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
*             And you can get the number of remaining data to be transferred using 
*             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
*             enabled and running).  
*                   
*          9. To control DMA events you can use one of the following 
*              two methods:
*               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
*               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
*                  phase and DMA_GetITStatus() function into interrupt routines in
*                  communication phase.  
*              After checking on a flag you should clear it using DMA_ClearFlag()
*              function. And after checking on an interrupt event you should 
*              clear it using DMA_ClearITPendingBit() function.    
*              
*          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
*              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
*              the Memory Address to be modified is not the one currently in use by DMA Stream.
*              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
*              
*          11. Optionally, Pause-Resume operations may be performed:
*              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
*              transfer is ongoing, calling this function to disable the Stream will cause the 
*              transfer to be paused. All configuration registers and the number of remaining 
*              data will be preserved. When calling again this function to re-enable the Stream, 
*              the transfer will be resumed from the point where it was paused.          
*                 
* @note   Memory-to-Memory transfer is possible by setting the address of the memory into
*         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
*         are not allowed.
*  
* @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
*         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
*         Half-Word data size for the peripheral to access its data register and set Word data size
*         for the Memory to gain in access time. Each two Half-words will be packed and written in
*         a single access to a Word in the Memory).
*    
* @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
*        and Destination. In this case the Peripheral Data Size will be applied to both Source
*        and Destination.               
*
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c</para>
    </simplesect>
</section>
