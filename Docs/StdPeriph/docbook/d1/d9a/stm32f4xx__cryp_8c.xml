<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d1/d9a/stm32f4xx__cryp_8c">
    <title>stm32f4xx_cryp.c File Reference</title>
    <programlisting>#include stm32f4xx_cryp.h</programlisting>
    <programlisting>#include stm32f4xx_rcc.h</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d5/d52/group___c_r_y_p_1ga890221cb651a3f30f6d1bca0d9b0e13d">FLAG_MASK</link> ((uint8_t)0x20)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d5/d52/group___c_r_y_p_1ga85fda3522e69a1bf85f7dcd97b6023a1">MAX_TIMEOUT</link> ((uint16_t)0xFFFF)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1gae19e54c9910b697e38f6c7577704ffae">CRYP_DeInit</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1ga7b72c458d95581ab0a36be3e017fcf02">CRYP_Init</link> (
<link linkend="da/d99/struct_c_r_y_p___init_type_def">CRYP_InitTypeDef</link> * CRYP_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1ga8fb8ec75fe72d55046c8220825dfe41e">CRYP_StructInit</link> (
<link linkend="da/d99/struct_c_r_y_p___init_type_def">CRYP_InitTypeDef</link> * CRYP_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1gad4baa3865415215cae07c9fbfa131cb9">CRYP_KeyInit</link> (
<link linkend="de/da1/struct_c_r_y_p___key_init_type_def">CRYP_KeyInitTypeDef</link> * CRYP_KeyInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1gaeecd86b00d0d0137d97b06108789bcb2">CRYP_KeyStructInit</link> (
<link linkend="de/da1/struct_c_r_y_p___key_init_type_def">CRYP_KeyInitTypeDef</link> * CRYP_KeyInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1ga133964b50a07db3a32864308f6355a8b">CRYP_IVInit</link> (
<link linkend="d4/d4f/struct_c_r_y_p___i_v_init_type_def">CRYP_IVInitTypeDef</link> * CRYP_IVInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1ga58899074e08bbd65f2ed304cf0f42987">CRYP_IVStructInit</link> (
<link linkend="d4/d4f/struct_c_r_y_p___i_v_init_type_def">CRYP_IVInitTypeDef</link> * CRYP_IVInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1ga23ada9d9464e1362299d7612a1409a57">CRYP_FIFOFlush</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/da0/group___c_r_y_p___group1_1gad39ccd9b1f2e088e3a227d7a1c410d7c">CRYP_Cmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/d49/group___c_r_y_p___group2_1ga16dc76244318d464357ee6ff208bf9a4">CRYP_DataIn</link> (
uint32_t Data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="df/d49/group___c_r_y_p___group2_1gacbe5fcf4c7e4919192376fa615588b54">CRYP_DataOut</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ErrorStatus <link linkend="d1/d47/group___c_r_y_p___group3_1ga41a14be7fa43d500e7c94cce40910ea8">CRYP_SaveContext</link> (
<link linkend="d8/dc9/struct_c_r_y_p___context">CRYP_Context</link> * CRYP_ContextSave, <link linkend="de/da1/struct_c_r_y_p___key_init_type_def">CRYP_KeyInitTypeDef</link> * CRYP_KeyInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d47/group___c_r_y_p___group3_1gaf2986782fa66ea95b2a389595e17e0e5">CRYP_RestoreContext</link> (
<link linkend="d8/dc9/struct_c_r_y_p___context">CRYP_Context</link> * CRYP_ContextRestore)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d6/d05/group___c_r_y_p___group4_1ga111d0ec56facb27f8367ce6a33869115">CRYP_DMACmd</link> (
uint8_t CRYP_DMAReq, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d2e/group___c_r_y_p___group5_1gafbf5ee5f2c3ae4404149a994e15b33d8">CRYP_ITConfig</link> (
uint8_t CRYP_IT, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ITStatus <link linkend="d1/d2e/group___c_r_y_p___group5_1ga00a48b748ed127fa517cacec9dbf18f4">CRYP_GetITStatus</link> (
uint8_t CRYP_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="d1/d2e/group___c_r_y_p___group5_1ga993d568b626a74b2973d4a6848a681f6">CRYP_GetFlagStatus</link> (
uint8_t CRYP_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Cryptographic processor (CRYP) peripheral: </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Initialization and Configuration functions</para>
</listitem><listitem>
<para>Data treatment functions</para>
</listitem><listitem>
<para>Context swapping functions</para>
</listitem><listitem>
<para>DMA interface function</para>
</listitem><listitem>
<para>Interrupts and flags management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*                               
*          ===================================================================      
*                                 How to use this driver
*          =================================================================== 
*          1. Enable the CRYP controller clock using 
*              RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
*
*          2. Initialise the CRYP using CRYP_Init(), CRYP_KeyInit() and if 
*             needed CRYP_IVInit(). 
*
*          3. Flush the IN and OUT FIFOs by using CRYP_FIFOFlush() function.
*
*          4. Enable the CRYP controller using the CRYP_Cmd() function. 
*
*          5. If using DMA for Data input and output transfer, 
*             Activate the needed DMA Requests using CRYP_DMACmd() function 

*          6. If DMA is not used for data transfer, use CRYP_DataIn() and 
*             CRYP_DataOut() functions to enter data to IN FIFO and get result
*             from OUT FIFO.
*
*          7. To control CRYP events you can use one of the following 
*              two methods:
*               - Check on CRYP flags using the CRYP_GetFlagStatus() function.  
*               - Use CRYP interrupts through the function CRYP_ITConfig() at 
*                 initialization phase and CRYP_GetITStatus() function into 
*                 interrupt routines in processing phase.
*       
*          8. Save and restore Cryptographic processor context using  
*             CRYP_SaveContext() and CRYP_RestoreContext() functions.     
*
*
*          ===================================================================  
*                Procedure to perform an encryption or a decryption
*          ===================================================================  
*
*      Initialization
*      ===============  
*     1. Initialize the peripheral using CRYP_Init(), CRYP_KeyInit() and 
*        CRYP_IVInit functions:
*        - Configure the key size (128-, 192- or 256-bit, in the AES only) 
*        - Enter the symmetric key 
*        - Configure the data type
*        - In case of decryption in AES-ECB or AES-CBC, you must prepare 
*          the key: configure the key preparation mode. Then Enable the CRYP 
*          peripheral using CRYP_Cmd() function: the BUSY flag is set. 
*          Wait until BUSY flag is reset : the key is prepared for decryption
*       - Configure the algorithm and chaining (the DES/TDES in ECB/CBC, the 
*          AES in ECB/CBC/CTR) 
*       - Configure the direction (encryption/decryption).
*       - Write the initialization vectors (in CBC or CTR modes only)
*
*    2. Flush the IN and OUT FIFOs using the CRYP_FIFOFlush() function
*
*
*    Basic Processing mode (polling mode) 
*    ====================================  
*    1. Enable the cryptographic processor using CRYP_Cmd() function.
*
*    2. Write the first blocks in the input FIFO (2 to 8 words) using 
*       CRYP_DataIn() function.
*
*    3. Repeat the following sequence until the complete message has been 
*       processed:
*
*       a) Wait for flag CRYP_FLAG_OFNE occurs (using CRYP_GetFlagStatus() 
*          function), then read the OUT-FIFO using CRYP_DataOut() function
*          (1 block or until the FIFO is empty)
*
*       b) Wait for flag CRYP_FLAG_IFNF occurs, (using CRYP_GetFlagStatus() 
*          function then write the IN FIFO using CRYP_DataIn() function 
*          (1 block or until the FIFO is full)
*
*    4. At the end of the processing, CRYP_FLAG_BUSY flag will be reset and 
*        both FIFOs are empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is 
*        reset). You can disable the peripheral using CRYP_Cmd() function.
*
*    Interrupts Processing mode 
*    ===========================
*    In this mode, Processing is done when the data are transferred by the 
*    CPU during interrupts.
*
*    1. Enable the interrupts CRYP_IT_INI and CRYP_IT_OUTI using 
*       CRYP_ITConfig() function.
*
*    2. Enable the cryptographic processor using CRYP_Cmd() function.
*
*    3. In the CRYP_IT_INI interrupt handler : load the input message into the 
*       IN FIFO using CRYP_DataIn() function . You can load 2 or 4 words at a 
*       time, or load data until the IN FIFO is full. When the last word of
*       the message has been entered into the IN FIFO, disable the CRYP_IT_INI 
*       interrupt (using CRYP_ITConfig() function).
*
*    4. In the CRYP_IT_OUTI interrupt handler : read the output message from 
*       the OUT FIFO using CRYP_DataOut() function. You can read 1 block (2 or 
*       4 words) at a time or read data until the FIFO is empty.
*       When the last word has been read, INIM=0, BUSY=0 and both FIFOs are 
*       empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is reset). 
*       You can disable the CRYP_IT_OUTI interrupt (using CRYP_ITConfig() 
*       function) and you can disable the peripheral using CRYP_Cmd() function.
*
*    DMA Processing mode 
*    ====================
*    In this mode, Processing is done when the DMA is used to transfer the 
*    data from/to the memory.
*
*    1. Configure the DMA controller to transfer the input data from the 
*       memory using DMA_Init() function. 
*       The transfer length is the length of the message. 
*       As message padding is not managed by the peripheral, the message 
*       length must be an entire number of blocks. The data are transferred 
*       in burst mode. The burst length is 4 words in the AES and 2 or 4 
*       words in the DES/TDES. The DMA should be configured to set an 
*       interrupt on transfer completion of the output data to indicate that 
*       the processing is finished. 
*       Refer to DMA peripheral driver for more details.  
*
*    2. Enable the cryptographic processor using CRYP_Cmd() function. 
*       Enable the DMA requests CRYP_DMAReq_DataIN and CRYP_DMAReq_DataOUT 
*       using CRYP_DMACmd() function.
*
*    3. All the transfers and processing are managed by the DMA and the 
*       cryptographic processor. The DMA transfer complete interrupt indicates 
*       that the processing is complete. Both FIFOs are normally empty and 
*       CRYP_FLAG_BUSY flag is reset.
*
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c</para>
    </simplesect>
</section>
