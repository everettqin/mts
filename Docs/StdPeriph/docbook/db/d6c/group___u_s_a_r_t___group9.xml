<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="db/d6c/group___u_s_a_r_t___group9">
    <title>Interrupts and flags management functions</title>
    <simplesect>
        <title>Brief Description</title>

<para>Interrupts and flags management functions. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para><programlisting><literallayout> ===============================================================================
                   Interrupts and flags management functions
 ===============================================================================  

  This subsection provides a set of functions allowing to configure the USART 
  Interrupts sources, DMA channels requests and check or clear the flags or 
  pending bits status.
  The user should identify which mode will be used in his application to manage 
  the communication: Polling mode, Interrupt mode or DMA mode. 
    
  Polling Mode
  =============
  In Polling Mode, the SPI communication can be managed by 10 flags:
     1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
     2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
     3. USART_FLAG_TC : to indicate the status of the transmit operation
     4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
     5. USART_FLAG_CTS : to indicate the status of the nCTS input
     6. USART_FLAG_LBD : to indicate the status of the LIN break detection
     7. USART_FLAG_NE : to indicate if a noise error occur
     8. USART_FLAG_FE : to indicate if a frame error occur
     9. USART_FLAG_PE : to indicate if a parity error occur
     10. USART_FLAG_ORE : to indicate if an Overrun error occur

  In this Mode it is advised to use the following functions:
      - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
      - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);

  Interrupt Mode
  ===============
  In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
  and 10 pending bits: 

  Pending Bits:
  ------------- 
     1. USART_IT_TXE : to indicate the status of the transmit buffer register
     2. USART_IT_RXNE : to indicate the status of the receive buffer register
     3. USART_IT_TC : to indicate the status of the transmit operation
     4. USART_IT_IDLE : to indicate the status of the Idle Line             
     5. USART_IT_CTS : to indicate the status of the nCTS input
     6. USART_IT_LBD : to indicate the status of the LIN break detection
     7. USART_IT_NE : to indicate if a noise error occur
     8. USART_IT_FE : to indicate if a frame error occur
     9. USART_IT_PE : to indicate if a parity error occur
     10. USART_IT_ORE : to indicate if an Overrun error occur

  Interrupt Source:
  -----------------
     1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
                       interrupt. 
     2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
                        empty interrupt.
     3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
                       interrupt. 
     4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
     5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
     6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
                       interrupt. 
     7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
     8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.

@note Some parameters are coded in order to use them as interrupt source or as pending bits.

  In this Mode it is advised to use the following functions:
     - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
     - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
     - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);

  DMA Mode
  ========
  In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
     1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
     2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request

  In this Mode it is advised to use the following function:
     - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);</literallayout></programlisting> </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d6c/group___u_s_a_r_t___group9_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6">USART_ITConfig</link> (
USART_TypeDef * USARTx, uint16_t USART_IT, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="db/d6c/group___u_s_a_r_t___group9_1ga144630722defc9e312f0ad280b68e9da">USART_GetFlagStatus</link> (
USART_TypeDef * USARTx, uint16_t USART_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d6c/group___u_s_a_r_t___group9_1gad962e148fc466ae1b45b288f6c91d966">USART_ClearFlag</link> (
USART_TypeDef * USARTx, uint16_t USART_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ITStatus <link linkend="db/d6c/group___u_s_a_r_t___group9_1ga93d8f031241bcdbe938d091a85295445">USART_GetITStatus</link> (
USART_TypeDef * USARTx, uint16_t USART_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="db/d6c/group___u_s_a_r_t___group9_1ga1fc25d0338695063be5e50156955d9bc">USART_ClearITPendingBit</link> (
USART_TypeDef * USARTx, uint16_t USART_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <section>
            <title>Function Documentation</title>
            <section xml:id="db/d6c/group___u_s_a_r_t___group9_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6">
                <title>void USART_ITConfig (USART_TypeDef *USARTx, uint16_t USART_IT, FunctionalState NewState)</title> <emphasis>Enables or disables the specified USART interrupts.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>USARTx, :</entry>
                                <entry>
<para>where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
                                <entry>USART_IT, :</entry>
                                <entry>
<para>specifies the USART interrupt sources to be enabled or disabled. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>USART_IT_CTS: CTS change interrupt </para>
</listitem>
<listitem>
<para>USART_IT_LBD: LIN Break detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_TXE: Transmit Data Register empty interrupt </para>
</listitem>
<listitem>
<para>USART_IT_TC: Transmission complete interrupt </para>
</listitem>
<listitem>
<para>USART_IT_RXNE: Receive Data register not empty interrupt </para>
</listitem>
<listitem>
<para>USART_IT_IDLE: Idle line detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_PE: Parity Error interrupt </para>
</listitem>
<listitem>
<para>USART_IT_ERR: Error interrupt(Frame error, noise error, overrun error) </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
                                <entry>NewState, :</entry>
                                <entry>
<para>new state of the specified USARTx interrupts. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>None</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="db/d6c/group___u_s_a_r_t___group9_1ga144630722defc9e312f0ad280b68e9da">
                <title>FlagStatus USART_GetFlagStatus (USART_TypeDef *USARTx, uint16_t USART_FLAG)</title> <emphasis>Checks whether the specified USART flag is set or not.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>USARTx, :</entry>
                                <entry>
<para>where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
                                <entry>USART_FLAG, :</entry>
                                <entry>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5) </para>
</listitem>
<listitem>
<para>USART_FLAG_LBD: LIN Break detection flag </para>
</listitem>
<listitem>
<para>USART_FLAG_TXE: Transmit data register empty flag </para>
</listitem>
<listitem>
<para>USART_FLAG_TC: Transmission Complete flag </para>
</listitem>
<listitem>
<para>USART_FLAG_RXNE: Receive data register not empty flag </para>
</listitem>
<listitem>
<para>USART_FLAG_IDLE: Idle Line detection flag </para>
</listitem>
<listitem>
<para>USART_FLAG_ORE: OverRun Error flag </para>
</listitem>
<listitem>
<para>USART_FLAG_NE: Noise Error flag </para>
</listitem>
<listitem>
<para>USART_FLAG_FE: Framing Error flag </para>
</listitem>
<listitem>
<para>USART_FLAG_PE: Parity Error flag </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>The</entry>
                                <entry>
<para>new state of USART_FLAG (SET or RESET). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="db/d6c/group___u_s_a_r_t___group9_1gad962e148fc466ae1b45b288f6c91d966">
                <title>void USART_ClearFlag (USART_TypeDef *USARTx, uint16_t USART_FLAG)</title> <emphasis>Clears the USARTx&apos;s pending flags.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>USARTx, :</entry>
                                <entry>
<para>where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
                                <entry>USART_FLAG, :</entry>
                                <entry>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5). </para>
</listitem>
<listitem>
<para>USART_FLAG_LBD: LIN Break detection flag. </para>
</listitem>
<listitem>
<para>USART_FLAG_TC: Transmission Complete flag. </para>
</listitem>
<listitem>
<para>USART_FLAG_RXNE: Receive data register not empty flag.</para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Note: </title>

<para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) flags are cleared by software sequence: a read operation to USART_SR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga144630722defc9e312f0ad280b68e9da">USART_GetFlagStatus()</link>) followed by a read operation to USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1gac67a91845b0b1d54d31bdfb1c5e9867c">USART_ReceiveData()</link>). </para>
<simplesect/>
<para>RXNE flag can be also cleared by a read to the USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1gac67a91845b0b1d54d31bdfb1c5e9867c">USART_ReceiveData()</link>). </para>
<simplesect/>
<para>TC flag can be also cleared by software sequence: a read operation to USART_SR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga144630722defc9e312f0ad280b68e9da">USART_GetFlagStatus()</link>) followed by a write operation to USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga0b43d42da9540f446d494bf69823c6fb">USART_SendData()</link>). </para>
<simplesect/>
<para>TXE flag is cleared only by a write to the USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga0b43d42da9540f446d494bf69823c6fb">USART_SendData()</link>).</para>
</formalpara>

                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>None</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="db/d6c/group___u_s_a_r_t___group9_1ga93d8f031241bcdbe938d091a85295445">
                <title>ITStatus USART_GetITStatus (USART_TypeDef *USARTx, uint16_t USART_IT)</title> <emphasis>Checks whether the specified USART interrupt has occurred or not.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>USARTx, :</entry>
                                <entry>
<para>where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
                                <entry>USART_IT, :</entry>
                                <entry>
<para>specifies the USART interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para>
</listitem>
<listitem>
<para>USART_IT_LBD: LIN Break detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_TXE: Transmit Data Register empty interrupt </para>
</listitem>
<listitem>
<para>USART_IT_TC: Transmission complete interrupt </para>
</listitem>
<listitem>
<para>USART_IT_RXNE: Receive Data register not empty interrupt </para>
</listitem>
<listitem>
<para>USART_IT_IDLE: Idle line detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set </para>
</listitem>
<listitem>
<para>USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set </para>
</listitem>
<listitem>
<para>USART_IT_NE: Noise Error interrupt </para>
</listitem>
<listitem>
<para>USART_IT_FE: Framing Error interrupt </para>
</listitem>
<listitem>
<para>USART_IT_PE: Parity Error interrupt </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>The</entry>
                                <entry>
<para>new state of USART_IT (SET or RESET). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="db/d6c/group___u_s_a_r_t___group9_1ga1fc25d0338695063be5e50156955d9bc">
                <title>void USART_ClearITPendingBit (USART_TypeDef *USARTx, uint16_t USART_IT)</title> <emphasis>Clears the USARTx&apos;s interrupt pending bits.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>USARTx, :</entry>
                                <entry>
<para>where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral. </para>
</entry>
                            </row>
                            <row>
                                <entry>USART_IT, :</entry>
                                <entry>
<para>specifies the interrupt pending bit to clear. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para>
</listitem>
<listitem>
<para>USART_IT_LBD: LIN Break detection interrupt </para>
</listitem>
<listitem>
<para>USART_IT_TC: Transmission complete interrupt. </para>
</listitem>
<listitem>
<para>USART_IT_RXNE: Receive Data register not empty interrupt.</para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Note: </title>

<para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) pending bits are cleared by software sequence: a read operation to USART_SR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga93d8f031241bcdbe938d091a85295445">USART_GetITStatus()</link>) followed by a read operation to USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1gac67a91845b0b1d54d31bdfb1c5e9867c">USART_ReceiveData()</link>). </para>
<simplesect/>
<para>RXNE pending bit can be also cleared by a read to the USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1gac67a91845b0b1d54d31bdfb1c5e9867c">USART_ReceiveData()</link>). </para>
<simplesect/>
<para>TC pending bit can be also cleared by software sequence: a read operation to USART_SR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga93d8f031241bcdbe938d091a85295445">USART_GetITStatus()</link>) followed by a write operation to USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga0b43d42da9540f446d494bf69823c6fb">USART_SendData()</link>). </para>
<simplesect/>
<para>TXE pending bit is cleared only by a write to the USART_DR register (<link linkend="de/dc0/group___u_s_a_r_t_1ga0b43d42da9540f446d494bf69823c6fb">USART_SendData()</link>).</para>
</formalpara>

                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>None</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
        </section>
</section>
