<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="df/dd9/stm32f4xx__gpio_8c">
    <title>stm32f4xx_gpio.c File Reference</title>
    <programlisting>#include stm32f4xx_gpio.h</programlisting>
    <programlisting>#include stm32f4xx_rcc.h</programlisting>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db2/group___g_p_i_o___group1_1gaa60bdf3182c44b5fa818f237042f52ee">GPIO_DeInit</link> (
GPIO_TypeDef * GPIOx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db2/group___g_p_i_o___group1_1ga71abf9404261370d03cca449b88d3a65">GPIO_Init</link> (
GPIO_TypeDef * GPIOx, <link linkend="dd/d8f/struct_g_p_i_o___init_type_def">GPIO_InitTypeDef</link> * GPIO_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db2/group___g_p_i_o___group1_1gab28de41278e7f8c63d0851e2733b10df">GPIO_StructInit</link> (
<link linkend="dd/d8f/struct_g_p_i_o___init_type_def">GPIO_InitTypeDef</link> * GPIO_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db2/group___g_p_i_o___group1_1gad2f2e615928c69fd0d8c641a7cedaafc">GPIO_PinLockConfig</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="d1/d6a/group___g_p_i_o___group2_1ga98772ef6b639b3fa06c8ae5ba28d3aaa">GPIO_ReadInputDataBit</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="d1/d6a/group___g_p_i_o___group2_1ga139a33adc8409288e9f193bbebb5a0f7">GPIO_ReadInputData</link> (
GPIO_TypeDef * GPIOx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="d1/d6a/group___g_p_i_o___group2_1ga138270f8695b105b7c6ed405792919c1">GPIO_ReadOutputDataBit</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="d1/d6a/group___g_p_i_o___group2_1gaf8938a34280b7dc3e39872a7c17bb323">GPIO_ReadOutputData</link> (
GPIO_TypeDef * GPIOx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d6a/group___g_p_i_o___group2_1ga9e1352eed7c6620e18af2d86f6b6ff8e">GPIO_SetBits</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d6a/group___g_p_i_o___group2_1ga6fcd35b207a66608dd2c9d7de9247dc8">GPIO_ResetBits</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d6a/group___g_p_i_o___group2_1ga8f7b237fd744d9f7456fbe0da47a9b80">GPIO_WriteBit</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, <link linkend="dd/d94/group___g_p_i_o_1ga176130b21c0e719121470a6042d4cf19">BitAction</link> BitVal)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d6a/group___g_p_i_o___group2_1gaa925f19c8547a00c7a0c269a84873bf9">GPIO_Write</link> (
GPIO_TypeDef * GPIOx, uint16_t PortVal)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d1/d6a/group___g_p_i_o___group2_1gac1b837c66258872740d5f89f23549ab1">GPIO_ToggleBits</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d2/ded/group___g_p_i_o___group3_1ga0a77617a322562ae84f8d72486032c5d">GPIO_PinAFConfig</link> (
GPIO_TypeDef * GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the GPIO peripheral: </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Initialization and Configuration</para>
</listitem><listitem>
<para>GPIO Read and Write</para>
</listitem><listitem>
<para>GPIO Alternate functions configuration</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*
*          ===================================================================
*                                 How to use this driver
*          ===================================================================       
*           1. Enable the GPIO AHB clock using the following function
*                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
*             
*           2. Configure the GPIO pin(s) using GPIO_Init()
*              Four possible configuration are available for each pin:
*                - Input: Floating, Pull-up, Pull-down.
*                - Output: Push-Pull (Pull-up, Pull-down or no Pull)
*                          Open Drain (Pull-up, Pull-down or no Pull).
*                  In output mode, the speed is configurable: 2 MHz, 25 MHz,
*                  50 MHz or 100 MHz.
*                - Alternate Function: Push-Pull (Pull-up, Pull-down or no Pull)
*                                      Open Drain (Pull-up, Pull-down or no Pull).
*                - Analog: required mode when a pin is to be used as ADC channel
*                          or DAC output.
* 
*          3- Peripherals alternate function:
*              - For ADC and DAC, configure the desired pin in analog mode using 
*                  GPIO_InitStruct-&gt;GPIO_Mode = GPIO_Mode_AN;
*              - For other peripherals (TIM, USART...):
*                 - Connect the pin to the desired peripherals&apos; Alternate 
*                   Function (AF) using GPIO_PinAFConfig() function
*                 - Configure the desired pin in alternate function mode using
*                   GPIO_InitStruct-&gt;GPIO_Mode = GPIO_Mode_AF
*                 - Select the type, pull-up/pull-down and output speed via 
*                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
*                 - Call GPIO_Init() function
*        
*          4. To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
*          
*          5. To set/reset the level of a pin configured in output mode use
*             GPIO_SetBits()/GPIO_ResetBits()
*               
*          6. During and just after reset, the alternate functions are not 
*             active and the GPIO pins are configured in input floating mode
*             (except JTAG pins).
*
*          7. The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as 
*             general-purpose (PC14 and PC15, respectively) when the LSE
*             oscillator is off. The LSE has priority over the GPIO function.
*
*          8. The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
*             general-purpose PH0 and PH1, respectively, when the HSE 
*             oscillator is off. The HSE has priority over the GPIO function.
*             
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c</para>
    </simplesect>
</section>
