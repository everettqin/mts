<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d8/d8d/stm32f4xx__sdio_8c">
    <title>stm32f4xx_sdio.c File Reference</title>
    <programlisting>#include stm32f4xx_sdio.h</programlisting>
    <programlisting>#include stm32f4xx_rcc.h</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gabf07aced03df5f46d57cea1d4f56d1e3">SDIO_OFFSET</link> (SDIO_BASE - PERIPH_BASE)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gac5d642be874338519fdec175204ca8ed">CLKCR_OFFSET</link> (SDIO_OFFSET + 0x04)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga6ad1da47f9d84c54eb620b9231ebec86">CLKEN_BitNumber</link> 0x08</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gabfb5772b9b734972b576309f7ca8bf92">CLKCR_CLKEN_BB</link> (PERIPH_BB_BASE + (CLKCR_OFFSET * 32) + (CLKEN_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gaf12d26702ce7a88d2a3dae87f000b75e">CMD_OFFSET</link> (SDIO_OFFSET + 0x0C)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gaf88f03a42d76974b55dfb8bda65ade97">SDIOSUSPEND_BitNumber</link> 0x0B</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga931e48aa282e2a937308f57f807e0781">CMD_SDIOSUSPEND_BB</link> (PERIPH_BB_BASE + (CMD_OFFSET * 32) + (SDIOSUSPEND_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga1d1112c7b804791a0fffd8b317085aeb">ENCMDCOMPL_BitNumber</link> 0x0C</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gade06098d1616639ce5f1b70675280b7c">CMD_ENCMDCOMPL_BB</link> (PERIPH_BB_BASE + (CMD_OFFSET * 32) + (ENCMDCOMPL_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gab6d83a7ccd4a0d9ea9a09fec263fb25f">NIEN_BitNumber</link> 0x0D</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga08623f1d053677de8b20a6f5f5090edd">CMD_NIEN_BB</link> (PERIPH_BB_BASE + (CMD_OFFSET * 32) + (NIEN_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gabd4fd3bb700b879f843ccc867db1832e">ATACMD_BitNumber</link> 0x0E</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gabb7e537f931b6fdd3b49e826f2e19d7c">CMD_ATACMD_BB</link> (PERIPH_BB_BASE + (CMD_OFFSET * 32) + (ATACMD_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga948c1382c4cfd3af3e406c4d0cdd4240">DCTRL_OFFSET</link> (SDIO_OFFSET + 0x2C)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gab2af311e327213503f0dbf3d013b7944">DMAEN_BitNumber</link> 0x03</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga43f7336d4f955c6cf1f676ccbc043fe9">DCTRL_DMAEN_BB</link> (PERIPH_BB_BASE + (DCTRL_OFFSET * 32) + (DMAEN_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga773045c51d3e8daee0c181517c44a2df">RWSTART_BitNumber</link> 0x08</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gac776c39dfac0e1ed007217133e1145c3">DCTRL_RWSTART_BB</link> (PERIPH_BB_BASE + (DCTRL_OFFSET * 32) + (RWSTART_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gae8c0654ad5cba23281bcfa77ef19b9cf">RWSTOP_BitNumber</link> 0x09</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga678da1db835676b0fb1976cf3408e2d1">DCTRL_RWSTOP_BB</link> (PERIPH_BB_BASE + (DCTRL_OFFSET * 32) + (RWSTOP_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gad7b722671f65e79d1be2899b643278ad">RWMOD_BitNumber</link> 0x0A</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gad34bfe8650534ce24320ae83886c91e3">DCTRL_RWMOD_BB</link> (PERIPH_BB_BASE + (DCTRL_OFFSET * 32) + (RWMOD_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga37f3e1612e0dae8160be978ebfa54301">SDIOEN_BitNumber</link> 0x0B</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga894f7da62b89ddd9f4b79d066056a3c7">DCTRL_SDIOEN_BB</link> (PERIPH_BB_BASE + (DCTRL_OFFSET * 32) + (SDIOEN_BitNumber * 4))</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1gac8d10dd1e49ca9e8a6954146654e9a01">CLKCR_CLEAR_MASK</link> ((uint32_t)0xFFFF8100)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga7e6ec7be68d0fbb8fb4e3725cca9a05c">PWR_PWRCTRL_MASK</link> ((uint32_t)0xFFFFFFFC)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga9e9fc7810b95805aeeb760bbdd87fa9b">DCTRL_CLEAR_MASK</link> ((uint32_t)0xFFFFFF08)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga2325d77090e44221b07f8fba5bc9217e">CMD_CLEAR_MASK</link> ((uint32_t)0xFFFFF800)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="da/df6/group___s_d_i_o_1ga4285ce49b005e3d03ddf9fdc491c4d70">SDIO_RESP_ADDR</link> ((uint32_t)(SDIO_BASE + 0x14))</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d53/group___s_d_i_o___group1_1gac359d2c6c67a2590f8f9b720c0e4ff1b">SDIO_DeInit</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d53/group___s_d_i_o___group1_1gad40764a8e37c0ed5c9141ae338ff0203">SDIO_Init</link> (
<link linkend="dd/d5e/struct_s_d_i_o___init_type_def">SDIO_InitTypeDef</link> * SDIO_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d53/group___s_d_i_o___group1_1ga778d338c29df4fae9ef69432e6df32ad">SDIO_StructInit</link> (
<link linkend="dd/d5e/struct_s_d_i_o___init_type_def">SDIO_InitTypeDef</link> * SDIO_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d53/group___s_d_i_o___group1_1ga7243b857d6b323748ff3a493b265bedc">SDIO_ClockCmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d53/group___s_d_i_o___group1_1ga36ecca32b904de74218fbe65cd5f5270">SDIO_SetPowerState</link> (
uint32_t SDIO_PowerState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="d3/d53/group___s_d_i_o___group1_1ga3a19de2c7cd51645702213f64a1758ed">SDIO_GetPowerState</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/d20/group___s_d_i_o___group2_1ga7117d2f702703f6c0a66bc07707cab23">SDIO_SendCommand</link> (
<link linkend="d3/d44/struct_s_d_i_o___cmd_init_type_def">SDIO_CmdInitTypeDef</link> * SDIO_CmdInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/d20/group___s_d_i_o___group2_1ga09d9e89f49c87c82aec79c97b7068e24">SDIO_CmdStructInit</link> (
<link linkend="d3/d44/struct_s_d_i_o___cmd_init_type_def">SDIO_CmdInitTypeDef</link> * SDIO_CmdInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="de/d20/group___s_d_i_o___group2_1ga9badf271c818e09da301d715c4ad0e5b">SDIO_GetCommandResponse</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="de/d20/group___s_d_i_o___group2_1ga5c1e859511840e8cca6a9a768bce220b">SDIO_GetResponse</link> (
uint32_t SDIO_RESP)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/dba/group___s_d_i_o___group3_1gad65d896ae919683585bda44a1e2afae4">SDIO_DataConfig</link> (
<link linkend="de/dbe/struct_s_d_i_o___data_init_type_def">SDIO_DataInitTypeDef</link> * SDIO_DataInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/dba/group___s_d_i_o___group3_1gaa83209c09e921521aca2587fb5b22ea2">SDIO_DataStructInit</link> (
<link linkend="de/dbe/struct_s_d_i_o___data_init_type_def">SDIO_DataInitTypeDef</link> * SDIO_DataInitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="de/dba/group___s_d_i_o___group3_1ga7a28aaa2c25a9a5a8db1f49b0e8c9d0a">SDIO_GetDataCounter</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="de/dba/group___s_d_i_o___group3_1ga4e8ac755ef3c31ecd4ed2708df19187e">SDIO_ReadData</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="de/dba/group___s_d_i_o___group3_1ga361008b5252aa33b5f2b5823ee3d7240">SDIO_WriteData</link> (
uint32_t Data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="de/dba/group___s_d_i_o___group3_1ga9a3343983a2d68b5164a1c89797d2dd6">SDIO_GetFIFOCount</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d19/group___s_d_i_o___group4_1gac88f914d9a68a83abc2265ec8a7b79fc">SDIO_StartSDIOReadWait</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d19/group___s_d_i_o___group4_1gaca6b25eb2debb73ac827c66f0ebcf837">SDIO_StopSDIOReadWait</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d19/group___s_d_i_o___group4_1ga2baac4ea1bb6c2d94345d2712604338a">SDIO_SetSDIOReadWaitMode</link> (
uint32_t SDIO_ReadWaitMode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d19/group___s_d_i_o___group4_1ga24e210c185d5a7855cbaff4472a8f8d1">SDIO_SetSDIOOperation</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/d19/group___s_d_i_o___group4_1ga9264137a01a1ab81d03bc80a3b3120fc">SDIO_SendSDIOSuspendCmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db5/group___s_d_i_o___group5_1ga1bbe98c629812bc62121d9c8b2c5e21b">SDIO_CommandCompletionCmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db5/group___s_d_i_o___group5_1gab44b8cbc21be000a291563076159503b">SDIO_CEATAITCmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d4/db5/group___s_d_i_o___group5_1ga8dc7f17804bdb745b42f6647c8487b4c">SDIO_SendCEATACmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d6/d8f/group___s_d_i_o___group6_1gad36fde5ec0ce0c2089b9d971c2271e6e">SDIO_DMACmd</link> (
FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d0/d36/group___s_d_i_o___group7_1ga208f51237ef43288735829dbaed37f00">SDIO_ITConfig</link> (
uint32_t SDIO_IT, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="d0/d36/group___s_d_i_o___group7_1ga644514b4b3c95c5c4326d99cd166f6f9">SDIO_GetFlagStatus</link> (
uint32_t SDIO_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d0/d36/group___s_d_i_o___group7_1ga7aff4efdeb528229135f9f285e53518a">SDIO_ClearFlag</link> (
uint32_t SDIO_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ITStatus <link linkend="d0/d36/group___s_d_i_o___group7_1ga2d64af1f3df0f99cb518f9a89bbd02ac">SDIO_GetITStatus</link> (
uint32_t SDIO_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d0/d36/group___s_d_i_o___group7_1ga048e07fd86321cd01b2a22c071c3149b">SDIO_ClearITPendingBit</link> (
uint32_t SDIO_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Secure digital input/output interface (SDIO) peripheral: </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Initialization and Configuration</para>
</listitem><listitem>
<para>Command path state machine (CPSM) management</para>
</listitem><listitem>
<para>Data path state machine (DPSM) management</para>
</listitem><listitem>
<para>SDIO IO Cards mode management</para>
</listitem><listitem>
<para>CE-ATA mode management</para>
</listitem><listitem>
<para>DMA transfers management</para>
</listitem><listitem>
<para>Interrupts and flags management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*
*
*          ===================================================================
*                                 How to use this driver
*          ===================================================================
*          1. The SDIO clock (SDIOCLK = 48 MHz) is coming from a specific output
*             of PLL (PLL48CLK). Before to start working with SDIO peripheral
*             make sure that the PLL is well configured.
*          The SDIO peripheral uses two clock signals:
*              - SDIO adapter clock (SDIOCLK = 48 MHz)
*              - APB2 bus clock (PCLK2)
*          PCLK2 and SDIO_CK clock frequencies must respect the following condition:
*                   Frequenc(PCLK2) &gt;= (3 / 8 x Frequency(SDIO_CK))
*
*          2. Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE).
*
*          3.  According to the SDIO mode, enable the GPIO clocks using 
*              RCC_AHB1PeriphClockCmd() function. 
*              The I/O can be one of the following configurations:
*                 - 1-bit data length: SDIO_CMD, SDIO_CK and D0.
*                 - 4-bit data length: SDIO_CMD, SDIO_CK and D[3:0].
*                 - 8-bit data length: SDIO_CMD, SDIO_CK and D[7:0].      
*
*          4. Peripheral&apos;s alternate function: 
*                 - Connect the pin to the desired peripherals&apos; Alternate 
*                   Function (AF) using GPIO_PinAFConfig() function
*                 - Configure the desired pin in alternate function by:
*                   GPIO_InitStruct-&gt;GPIO_Mode = GPIO_Mode_AF
*                 - Select the type, pull-up/pull-down and output speed via 
*                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
*                 - Call GPIO_Init() function
*
*          5. Program the Clock Edge, Clock Bypass, Clock Power Save, Bus Wide, 
*             hardware, flow control and the Clock Divider using the SDIO_Init()
*             function.
*
*          6. Enable the Power ON State using the SDIO_SetPowerState(SDIO_PowerState_ON) 
*             function.
*              
*          7. Enable the clock using the SDIO_ClockCmd() function.
*
*          8. Enable the NVIC and the corresponding interrupt using the function 
*             SDIO_ITConfig() if you need to use interrupt mode. 
*
*          9. When using the DMA mode 
*                   - Configure the DMA using DMA_Init() function
*                   - Active the needed channel Request using SDIO_DMACmd() function
*
*          10. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
*
*          11. To control the CPSM (Command Path State Machine) and send 
*              commands to the card use the SDIO_SendCommand(), 
*              SDIO_GetCommandResponse() and SDIO_GetResponse() functions.     
*              First, user has to fill the command structure (pointer to
*              SDIO_CmdInitTypeDef) according to the selected command to be sent.
*                 The parameters that should be filled are:
*                   - Command Argument
*                   - Command Index
*                   - Command Response type
*                   - Command Wait
*                   - CPSM Status (Enable or Disable)
*
*              To check if the command is well received, read the SDIO_CMDRESP
*              register using the SDIO_GetCommandResponse().
*              The SDIO responses registers (SDIO_RESP1 to SDIO_RESP2), use the
*              SDIO_GetResponse() function.
*
*          12. To control the DPSM (Data Path State Machine) and send/receive 
*              data to/from the card use the SDIO_DataConfig(), SDIO_GetDataCounter(), 
*              SDIO_ReadData(), SDIO_WriteData() and SDIO_GetFIFOCount() functions.
*
*              Read Operations
*              ---------------
*              a) First, user has to fill the data structure (pointer to
*                 SDIO_DataInitTypeDef) according to the selected data type to
*                 be received.
*                 The parameters that should be filled are:
*                   - Data TimeOut
*                   - Data Length
*                   - Data Block size
*                   - Data Transfer direction: should be from card (To SDIO)
*                   - Data Transfer mode
*                   - DPSM Status (Enable or Disable)
*                                   
*              b) Configure the SDIO resources to receive the data from the card
*                 according to selected transfer mode (Refer to Step 8, 9 and 10).
*
*              c) Send the selected Read command (refer to step 11).
*                  
*              d) Use the SDIO flags/interrupts to check the transfer status.
*
*              Write Operations
*              ---------------
*              a) First, user has to fill the data structure (pointer to
*                 SDIO_DataInitTypeDef) according to the selected data type to
*                 be received.
*                 The parameters that should be filled are:
*                   - Data TimeOut
*                   - Data Length
*                   - Data Block size
*                   - Data Transfer direction:  should be to card (To CARD)
*                   - Data Transfer mode
*                   - DPSM Status (Enable or Disable)
*
*              b) Configure the SDIO resources to send the data to the card
*                 according to selected transfer mode (Refer to Step 8, 9 and 10).
*                   
*              c) Send the selected Write command (refer to step 11).
*                  
*              d) Use the SDIO flags/interrupts to check the transfer status.
*
*
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c</para>
    </simplesect>
</section>
