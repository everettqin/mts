<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d6/d3e/stm32f4xx__iwdg_8c">
    <title>stm32f4xx_iwdg.c File Reference</title>
    <programlisting>#include stm32f4xx_iwdg.h</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d5/dc4/group___i_w_d_g_1ga830a9a1bad16c7043c86545f4c159a50">KR_KEY_RELOAD</link> ((uint16_t)0xAAAA)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d5/dc4/group___i_w_d_g_1gaeaa0dd2da3f9d0cce0d708cfff1df545">KR_KEY_ENABLE</link> ((uint16_t)0xCCCC)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/d52/group___i_w_d_g___group1_1gae466681e5bdc11b353c508b89d75ca05">IWDG_WriteAccessCmd</link> (
uint16_t IWDG_WriteAccess)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/d52/group___i_w_d_g___group1_1ga4fa7f1cd690533a35ad9e4729c0450a3">IWDG_SetPrescaler</link> (
uint8_t IWDG_Prescaler)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/d52/group___i_w_d_g___group1_1gae2a14752a0431f23cb80cebf202ac365">IWDG_SetReload</link> (
uint16_t Reload)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="da/d52/group___i_w_d_g___group1_1ga7147ebabdc3fef97f532b171a4e70d49">IWDG_ReloadCounter</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d8/d9b/group___i_w_d_g___group2_1ga479b2921c86f8c67b819f5c4bea6bdb6">IWDG_Enable</link> (
void )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="d1/da7/group___i_w_d_g___group3_1ga37f050cfbedc0c15f9e0816c0b22011e">IWDG_GetFlagStatus</link> (
uint16_t IWDG_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Independent watchdog (IWDG) peripheral: </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Prescaler and Counter configuration</para>
</listitem><listitem>
<para>IWDG activation</para>
</listitem><listitem>
<para>Flag management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*  
*          ===================================================================
*                                     IWDG features
*          ===================================================================
*    
*          The IWDG can be started by either software or hardware (configurable
*          through option byte).
*            
*          The IWDG is clocked by its own dedicated low-speed clock (LSI) and
*          thus stays active even if the main clock fails.
*          Once the IWDG is started, the LSI is forced ON and cannot be disabled
*          (LSI cannot be disabled too), and the counter starts counting down from 
*          the reset value of 0xFFF. When it reaches the end of count value (0x000)
*          a system reset is generated.
*          The IWDG counter should be reloaded at regular intervals to prevent
*          an MCU reset.
*                           
*          The IWDG is implemented in the VDD voltage domain that is still functional
*          in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).          
*            
*          IWDGRST flag in RCC_CSR register can be used to inform when a IWDG
*          reset occurs.
*            
*          Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
*          The IWDG timeout may vary due to LSI frequency dispersion. STM32F4xx
*          devices provide the capability to measure the LSI frequency (LSI clock
*          connected internally to TIM5 CH4 input capture). The measured value
*          can be used to have an IWDG timeout with an acceptable accuracy. 
*          For more information, please refer to the STM32F4xx Reference manual
*          
*                            
*          ===================================================================
*                                 How to use this driver
*          ===================================================================
*          1. Enable write access to IWDG_PR and IWDG_RLR registers using
*             IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function
*               
*          2. Configure the IWDG prescaler using IWDG_SetPrescaler() function
*            
*          3. Configure the IWDG counter value using IWDG_SetReload() function.
*             This value will be loaded in the IWDG counter each time the counter
*             is reloaded, then the IWDG will start counting down from this value.
*            
*          4. Start the IWDG using IWDG_Enable() function, when the IWDG is used
*             in software mode (no need to enable the LSI, it will be enabled
*             by hardware)
*             
*          5. Then the application program must reload the IWDG counter at regular
*             intervals during normal operation to prevent an MCU reset, using
*             IWDG_ReloadCounter() function.      
*          
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c</para>
    </simplesect>
</section>
