<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="dc/dbc/stm32f4xx__i2c_8c">
    <title>stm32f4xx_i2c.c File Reference</title>
    <programlisting>#include stm32f4xx_i2c.h</programlisting>
    <programlisting>#include stm32f4xx_rcc.h</programlisting>
        <simplesect>
            <title>Defines</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d0/d5b/group___i2_c_1ga8d425258898b4af4ebc820f52635fad8">CR1_CLEAR_MASK</link> ((uint16_t)0xFBF5)      /*&lt;! I2C registers Masks */</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d0/d5b/group___i2_c_1ga890221cb651a3f30f6d1bca0d9b0e13d">FLAG_MASK</link> ((uint32_t)0x00FFFFFF)  /*&lt;! I2C FLAG mask */</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="d0/d5b/group___i2_c_1ga0befa8c9e0cb00ab52bd8a8d68718706">ITEN_MASK</link> ((uint32_t)0x07000000)  /*&lt;! I2C Interrupt Enable mask */</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga2ee214364603059ad5d9089f749f5bfd">I2C_DeInit</link> (
I2C_TypeDef * I2Cx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1gaac29465bca70fbc91c2f922ab67bb88e">I2C_Init</link> (
I2C_TypeDef * I2Cx, <link linkend="df/d5e/struct_i2_c___init_type_def">I2C_InitTypeDef</link> * I2C_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga08582aca6d7d7910cd5cbff0d9def350">I2C_StructInit</link> (
<link linkend="df/d5e/struct_i2_c___init_type_def">I2C_InitTypeDef</link> * I2C_InitStruct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga7e1323c9133c2cb424dfb5b10b7d2f0b">I2C_Cmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga36c522b471588be9779c878222ccb20f">I2C_GenerateSTART</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga5c92cb573ca0ae58cc465e5400246561">I2C_GenerateSTOP</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga009fc2a5b2313c36da39ece39a1156a6">I2C_Send7bitAddress</link> (
I2C_TypeDef * I2Cx, uint8_t Address, uint8_t I2C_Direction)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga7bb44e894d68a7991f564c43fb187486">I2C_AcknowledgeConfig</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga7be2cc634a613c8e3539137e897a22df">I2C_OwnAddress2Config</link> (
I2C_TypeDef * I2Cx, uint8_t Address)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga02145a333a56e79557d6ef4ea03fc313">I2C_DualAddressCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga65c740fc8d7b3b9f15cc432d8699d471">I2C_GeneralCallCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga1289c908aeb882443aba323b459c638b">I2C_SoftwareResetCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga7459feb3b1dfcd3e4f6574002ca7d3bd">I2C_StretchClockCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1gaa570f76bc34e5b0531b29b1a90af1275">I2C_FastModeDutyCycleConfig</link> (
I2C_TypeDef * I2Cx, uint16_t I2C_DutyCycle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1gad08ebffc3a234d84e6405ec115bd74f1">I2C_NACKPositionConfig</link> (
I2C_TypeDef * I2Cx, uint16_t I2C_NACKPosition)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga75a810776d9710d2f6d9c5d9e93241c6">I2C_SMBusAlertConfig</link> (
I2C_TypeDef * I2Cx, uint16_t I2C_SMBusAlert)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="dc/d29/group___i2_c___group1_1ga66d86742bf1be58b17ef8779ffc79d02">I2C_ARPCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d3/df9/group___i2_c___group2_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9">I2C_SendData</link> (
I2C_TypeDef * I2Cx, uint8_t Data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="d3/df9/group___i2_c___group2_1gaeaaa4b6f77f50eb57465148c55d27fb2">I2C_ReceiveData</link> (
I2C_TypeDef * I2Cx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/dde/group___i2_c___group3_1gaa27d1440290fe601e730b6980999afe3">I2C_TransmitPEC</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/dde/group___i2_c___group3_1ga5d0f939bdd45542502827bf408f24161">I2C_PECPositionConfig</link> (
I2C_TypeDef * I2Cx, uint16_t I2C_PECPosition)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/dde/group___i2_c___group3_1gae86801251359226c35745e0a258388b0">I2C_CalculatePEC</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="df/dde/group___i2_c___group3_1ga7bf75e7c27c0e1d73e70fc0e1c7cd1dd">I2C_GetPEC</link> (
I2C_TypeDef * I2Cx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/dc9/group___i2_c___group4_1ga38502ce11e5ec923e0f6476aaa35b45c">I2C_DMACmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="df/dc9/group___i2_c___group4_1gab2e994c5681eb6ec7c26a03ffe1de060">I2C_DMALastTransferCmd</link> (
I2C_TypeDef * I2Cx, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="d8/de0/group___i2_c___group5_1ga8021dc796d15f997356b0583d6346805">I2C_ReadRegister</link> (
I2C_TypeDef * I2Cx, uint8_t I2C_Register)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d8/de0/group___i2_c___group5_1ga58fed146a06cb81d2940604e460de047">I2C_ITConfig</link> (
I2C_TypeDef * I2Cx, uint16_t I2C_IT, FunctionalState NewState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ErrorStatus <link linkend="d8/de0/group___i2_c___group5_1ga2d5701342f9d4c1f09bf9d3cdcacc326">I2C_CheckEvent</link> (
I2C_TypeDef * I2Cx, uint32_t I2C_EVENT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint32_t <link linkend="d8/de0/group___i2_c___group5_1ga29237aea9b5a3ead33167e1d027e9f1a">I2C_GetLastEvent</link> (
I2C_TypeDef * I2Cx)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>FlagStatus <link linkend="d8/de0/group___i2_c___group5_1ga15c95d0ed124f029621a2061b1677ee7">I2C_GetFlagStatus</link> (
I2C_TypeDef * I2Cx, uint32_t I2C_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d8/de0/group___i2_c___group5_1ga9d4f8fe9f7232696114b5578b1223963">I2C_ClearFlag</link> (
I2C_TypeDef * I2Cx, uint32_t I2C_FLAG)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ITStatus <link linkend="d8/de0/group___i2_c___group5_1ga447771fbbd94a56f3570b9f430a069ba">I2C_GetITStatus</link> (
I2C_TypeDef * I2Cx, uint32_t I2C_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="d8/de0/group___i2_c___group5_1ga110dda440fa200b5f77349df19b3e6bb">I2C_ClearITPendingBit</link> (
I2C_TypeDef * I2Cx, uint32_t I2C_IT)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Inter-integrated circuit (I2C) </para>

<para><formalpara><title>Author: </title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version: </title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date: </title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Initialization and Configuration</para>
</listitem><listitem>
<para>Data transfers</para>
</listitem><listitem>
<para>PEC management</para>
</listitem><listitem>
<para>DMA transfers management</para>
</listitem><listitem>
<para>Interrupts, events and flags management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<programlisting><literallayout>*    
*          ===================================================================
*                                 How to use this driver
*          ===================================================================
*          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
*             function for I2C1, I2C2 or I2C3.
*
*          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
*             RCC_AHBPeriphClockCmd() function. 
*
*          3. Peripherals alternate function: 
*                 - Connect the pin to the desired peripherals&apos; Alternate 
*                   Function (AF) using GPIO_PinAFConfig() function
*                 - Configure the desired pin in alternate function by:
*                   GPIO_InitStruct-&gt;GPIO_Mode = GPIO_Mode_AF
*                 - Select the type, pull-up/pull-down and output speed via 
*                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
*                 - Call GPIO_Init() function
*                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
*                 Add an external pull up if necessary (typically 4.7 KOhm).      
*        
*          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
*             Address using the I2C_Init() function.
*
*          5. Optionally you can enable/configure the following parameters without
*             re-initialization (i.e there is no need to call again I2C_Init() function):
*              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
*              - Enable the dual addressing mode using I2C_DualAddressCmd() function
*              - Enable the general call using the I2C_GeneralCallCmd() function
*              - Enable the clock stretching using I2C_StretchClockCmd() function
*              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
*                function.
*              - Configure the NACK position for Master Receiver mode in case of 
*                2 bytes reception using the function I2C_NACKPositionConfig().  
*              - Enable the PEC Calculation using I2C_CalculatePEC() function
*              - For SMBus Mode: 
*                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
*                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
*
*          6. Enable the NVIC and the corresponding interrupt using the function 
*             I2C_ITConfig() if you need to use interrupt mode. 
*
*          7. When using the DMA mode 
*                   - Configure the DMA using DMA_Init() function
*                   - Active the needed channel Request using I2C_DMACmd() or
*                     I2C_DMALastTransferCmd() function.
*              @note When using DMA mode, I2C interrupts may be used at the same time to
*                    control the communication flow (Start/Stop/Ack... events and errors).
* 
*          8. Enable the I2C using the I2C_Cmd() function.
* 
*          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
*             transfers. 
*
*  </literallayout></programlisting></para>

<para><formalpara><title>Attention: </title>

<para></para>
</formalpara>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#x00A9; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
    <para>Definition in file E:/Workspaces/Google_Drive/Google Drive/Workshop/arm/stsw-stm32068/STM32F4-Discovery_FW_V1.1.0/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c</para>
    </simplesect>
</section>
